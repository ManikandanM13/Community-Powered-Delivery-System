"use strict";

/*const express = require('express')
const app = express()
app.use(express.json())
app.get('/', (req, res) => res.send('Hello World!'))
const port = process.env.PORT || 5000
app.listen(port, () => console.log(`Example app listening on port ${port}!`)) */
var express = require('express');

var mongoose = require('mongoose');

var multer = require('multer');

var dotenv = require('dotenv');

var path = require('path');

var Host = require('./Host'); // Import the Host model


dotenv.config();
var app = express(); // Middleware to parse JSON

app.use(express.json()); // Set up multer for file uploads

var storage = multer.diskStorage({
  destination: function destination(req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function filename(req, file, cb) {
    cb(null, "".concat(Date.now(), "-").concat(file.originalname)); // Use template literals for string interpolation
  }
});
var upload = multer({
  storage: storage
}); // Connect to MongoDB

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(function () {
  return console.log('MongoDB connected');
})["catch"](function (err) {
  return console.log('MongoDB connection error:', err);
}); // Add a message for connection error
// Registration Route

app.post('/api/hosts/register', upload.single('idProof'), function _callee(req, res) {
  var _req$body, name, email, address, dob, password, idProof, newHost, savedHost;

  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _req$body = req.body, name = _req$body.name, email = _req$body.email, address = _req$body.address, dob = _req$body.dob, password = _req$body.password;
          idProof = req.file ? req.file.path : null;
          _context.prev = 2;
          newHost = new Host({
            name: name,
            email: email,
            address: address,
            dob: dob,
            idProof: idProof,
            password: password
          });
          _context.next = 6;
          return regeneratorRuntime.awrap(newHost.save());

        case 6:
          savedHost = _context.sent;
          res.status(201).json(savedHost);
          _context.next = 13;
          break;

        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](2);
          res.status(400).json({
            message: _context.t0.message
          });

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 10]]);
}); // Serve uploaded files statically

app.use('/uploads', express["static"](path.join(__dirname, 'uploads')));
var PORT = process.env.PORT || 5000;
app.listen(PORT, function () {
  return console.log("Server running on port ".concat(PORT));
}); // Use backticks for template literals