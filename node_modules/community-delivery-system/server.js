import express from 'express';
import mongoose from 'mongoose';
import multer from 'multer';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import Host from './Host.js'; // Ensure the file extension is .js

dotenv.config();

const app = express();

// Middleware to parse JSON
app.use(express.json());

// Set up multer for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}-${file.originalname}`); // Use template literals for string interpolation
  }
});
const upload = multer({ storage: storage });

// Connect to MongoDB
const MONGO_URI = process.env.MONGO_URI;
if (!MONGO_URI) {
  console.error('MONGO_URI is not defined');
  process.exit(1); // Exit the process if MONGO_URI is not defined
}

mongoose.connect(MONGO_URI, {
  // `useNewUrlParser` and `useUnifiedTopology` are no longer needed with the latest MongoDB Node.js driver
})
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Registration Route
app.post('/api/hosts/register', upload.single('idProof'), async (req, res) => {
  const { name, email, address, dob, password } = req.body;
  const idProof = req.file ? req.file.path : null;

  try {
    const newHost = new Host({
      name,
      email,
      address,
      dob,
      idProof,
      password
    });

    const savedHost = await newHost.save();
    res.status(201).json(savedHost);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Serve uploaded files statically
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
